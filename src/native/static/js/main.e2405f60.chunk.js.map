{"version":3,"sources":["chat/minimizable/WebChat.js","chat/minimizable/WebPage.jpg","chat/minimizable/WebChatMinimizable.js","chat/webchat/WebChatFullScreen.js","bot/token/fetchSpeechServicesCredentials.js","chat/speech/DictationInterims.js","chat/speech/MicrophoneIcon.js","chat/speech/MicrophoneButton.js","chat/speech/LastBotActivity.js","chat/speech/SpeechChat.js","bot/BlurLens.js","bot/hooks/useLastBotActivity.js","bot/BotResponse.js","bot/MicrophoneButton.js","bot/SpeechInterims.js","chat/display/widgets/Notification.js","chat/display/widgets/Clock.js","chat/display/SmartDisplay.js","chat/display/Display.js","bot/HoloResponse.js","chat/holograph/model/RobotExpressive.js","chat/holograph/scene/Scene.js","chat/holograph/scene/Actions.js","chat/holograph/renderer/RendererComponent.js","chat/holograph/ComposerScene.js","chat/holograph/Holograph.js","App.js","index.js"],"names":["WebChat","className","onFetchToken","store","token","directLine","useMemo","createDirectLine","styleSet","createStyleSet","backgroundColor","useEffect","WebChatMinimizable","createStore","dispatch","next","action","type","payload","name","value","language","window","navigator","activity","from","role","setNewMessage","useState","loaded","setLoaded","minimized","setMinimized","newMessage","side","setSide","setToken","handleFetchToken","useCallback","console","log","fetch","process","method","res","json","handleMaximizeButtonClick","handleMinimizeButtonClick","handleSwitchButtonClick","onClick","classNames","alt","src","WebPageBackground","WebChatFullScreen","accent","fontSizeSmall","avatarBorderRadius","avatarSize","botAvatarInitials","botAvatarImage","userAvatarInitials","bubbleBackground","bubbleBorderRadius","bubbleBorderStyle","bubbleBorderWidth","bubbleFromUserBackground","bubbleFromUserBorderRadius","bubbleFromUserBorderStyle","bubbleFromUserBorderWidth","bubbleFromUserTextColor","bubbleMinWidth","bubbleTextColor","hideSendBox","hideUploadButton","suggestedActionBorderRadius","webSpeechPonyfillFactory","undefined","fetchPromise","RENEW_EVERY","lastFetch","fetchCredentials","now","Date","then","region","authorizationToken","catch","connectDictationInterims","Components","Constants","DictateState","DICTATING","STARTING","dictateInterims","dictateState","length","map","interim","index","key","size","height","viewBox","width","d","connectMicrophoneButton","click","dictating","disabled","MicrophoneIcon","SpeakActivity","connectToWebChat","activities","slice","reverse","find","Fragment","text","channelData","speak","Composer","SpeechChat","directLineSpeechAdapters","setDirectLineSpeechAdapters","createDirectLineSpeechAdapters","fetchCognitiveServicesCredentials","MicrophoneButton","DictationInterims","LastBotActivity","useSendBoxSpeechInterimsVisible","hooks","BlurLens","interimsVisible","hide","useActivities","useLastBotActivity","BotResponse","lastReadActivityID","lastBotActivity","renderAttachment","createAdaptiveCardsAttachmentMiddleware","id","showScrollBar","attachments","attachment","useMicrophoneButtonClick","useMicrophoneButtonDisabled","CustomMicrophoneButton","handleClick","useDictateInterims","CustomDictationInterims","speechInterimsVisible","Notification","children","icon","Clock","clock","setClock","temperatureInFahrenheit","setTemperatureInFahrenheit","headers","accept","ok","properties","periods","firstPeriod","temperature","fn","intervalMS","interval","setInterval","clearInterval","useInterval","Intl","DateTimeFormat","hour12","timeStyle","format","SmartDisplay","setLastReadActivityID","handleMicrophoneButtonClick","Display","HoloResponse","loadRobotExpressiveModel","scene","camera","callback","GLTFLoader","load","gltf","position","set","scale","add","morph","getObjectByName","mixer","THREE","animations","forEach","clip","clipAction","setLoop","play","event","e","error","Scene","innerWidth","innerHeight","this","isNew","clips","mixers","morphs","setParams","setBackground","setGround","setLight","lookAt","background","fog","mesh","color","depthWrite","rotation","x","Math","PI","grid","material","opacity","transparent","hemiLight","dirLight","Actions","addModel","push","dt","update","JSON","parse","replaceAll","intentResult","exe_clip","sentimentResult","morphDict","stringify","influence","expressions","Object","keys","morphTargetDictionary","morphTargetInfluences","exe_morph","sentiment","floor","random","build_morph","RendererComponent","props","start","bind","stop","animate","init","setParam","scenes","mount","appendChild","renderer","domElement","removeChild","frameId","requestAnimationFrame","cancelAnimationFrame","getDelta","exeAnimateClip","exeAnimateMorph","render","ref","antialias","setPixelRatio","devicePixelRatio","setSize","outputEncoding","Component","ComposerScene","Holograph","App","path","element","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e2405f60.chunk.js","sourcesContent":["/**\n * 对话聊天界面(内容界面)\n */\nimport React, { useEffect, useMemo } from 'react';\nimport ReactWebChat, { createDirectLine, createStyleSet } from 'botframework-webchat';\n\nimport './WebChat.css';\n\nconst WebChat = ({ className, onFetchToken, store, token }) => {\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  useEffect(() => {\n    onFetchToken();\n  }, [onFetchToken]);\n\n  return token ? (\n    <ReactWebChat className={`${className || ''} web-chat`} directLine={directLine} store={store} styleSet={styleSet} />\n  ) : (\n    <div className={`${className || ''} connect-spinner`}>\n      <div className=\"content\">\n        <div className=\"icon\">\n          <span className=\"ms-Icon ms-Icon--Robot\" />\n        </div>\n        <p>Please wait while we are connecting.</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WebChat;\n","export default __webpack_public_path__ + \"static/media/WebPage.7f2d2c96.jpg\";","/**\n * 对话聊天界面(可最小化)\n */\nimport classNames from 'classnames';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { createStore, createStyleSet } from 'botframework-webchat';\n\nimport WebChat from './WebChat';\nimport WebPageBackground from './WebPage.jpg';\n\nimport './fabric-icons-inline.css';\nimport './WebChatMinimizable.css';\n\nconst WebChatMinimizable = () => {\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            setNewMessage(true);\n          }\n        }\n\n        return next(action);\n      }),\n    []\n  );\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        backgroundColor: 'Transparent'\n      }),\n    []\n  );\n\n  const [loaded, setLoaded] = useState(false);\n  const [minimized, setMinimized] = useState(true);\n  const [newMessage, setNewMessage] = useState(false);\n  const [side, setSide] = useState('right');\n  const [token, setToken] = useState();\n\n  // To learn about reconnecting to a conversation, see the following documentation:\n  // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-reconnect-to-conversation?view=azure-bot-service-4.0\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n       console.log('REACT_APP_DIRECT_LINE_TOKEN_URL: ' + process.env.REACT_APP_DIRECT_LINE_TOKEN_URL);\n       const res = await fetch(process.env.REACT_APP_DIRECT_LINE_TOKEN_URL, { method: 'POST' });\n       const { token } = await res.json();\n\n       setToken(token);\n    }\n  }, [setToken, token]);\n\n  const handleMaximizeButtonClick = useCallback(async () => {\n    setLoaded(true);\n    setMinimized(false);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleMinimizeButtonClick = useCallback(() => {\n    setMinimized(true);\n    setNewMessage(false);\n  }, [setMinimized, setNewMessage]);\n\n  const handleSwitchButtonClick = useCallback(() => {\n    setSide(side === 'left' ? 'right' : 'left');\n  }, [setSide, side]);\n\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\n  //       When minimized, we still want to maintain that connection while the UI is gone.\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\n\n  return (\n    <div className=\"minimizable-web-chat\">\n      {minimized && (\n        <button className=\"maximize\" onClick={handleMaximizeButtonClick}>\n          <span className={token ? 'ms-Icon ms-Icon--MessageFill' : 'ms-Icon ms-Icon--Message'} />\n          {newMessage && <span className=\"ms-Icon ms-Icon--CircleShapeSolid red-dot\" />}\n        </button>\n      )}\n      {loaded && (\n        <div className={classNames(side === 'left' ? 'chat-box left' : 'chat-box right', minimized ? 'hide' : '')}>\n          <header>\n            <div className=\"filler\" />\n            <button className=\"switch\" onClick={handleSwitchButtonClick}>\n              <span className=\"ms-Icon ms-Icon--Switch\" />\n            </button>\n            <button className=\"minimize\" onClick={handleMinimizeButtonClick}>\n              <span className=\"ms-Icon ms-Icon--ChromeMinimize\" />\n            </button>\n          </header>\n          <WebChat\n            className=\"react-web-chat\"\n            onFetchToken={handleFetchToken}\n            store={store}\n            styleSet={styleSet}\n            token={token}\n          />\n        </div>\n      )}\n      <img alt=\"product background\" src={WebPageBackground} />\n    </div>\n  );\n};\n\nexport default WebChatMinimizable;\n","/**\n * 对话聊天界面(容器)\n */\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport ReactWebChat, {\n  createCognitiveServicesSpeechServicesPonyfillFactory,\n  createDirectLine,\n  createStore,\n  createStyleSet,\n} from 'botframework-webchat';\n\nimport {\n  fetchCredentials,\n} from '../../bot/token/fetchWebChatSpeechServicesCredentials'\n\nimport './fabric-icons-inline.css';\nimport './WebChatFullScreen.css';\n\nconst WebChatFullScreen = () => {\n  const store = useMemo(\n    () =>\n      createStore({}, ({ dispatch }) => next => action => {\n        if (action.type === 'DIRECT_LINE/CONNECT_FULFILLED') {\n          dispatch({\n            type: 'WEB_CHAT/SEND_EVENT',\n            payload: {\n              name: 'webchat/join',\n              value: {\n                language: window.navigator.language\n              }\n            }\n          });\n        } else if (action.type === 'DIRECT_LINE/INCOMING_ACTIVITY') {\n          if (action.payload.activity.from.role === 'bot') {\n            // setNewMessage(true);\n          }\n        }\n\n        return next(action);\n      }),\n    []\n  );\n\n  //  const cardActionMiddleware = useMemo(\n  //    () =>\n  //      next => async ({ cardAction, getSignInUrl }) => {\n  //        const { type, value } = cardAction;\n  //\n  //        switch (type) {\n  //          case 'signin':\n  //            const popup = window.open();\n  //            const url = await getSignInUrl();\n  //\n  //            popup.location.href = url;\n  //\n  //            break;\n  //\n  //          case 'openUrl':\n  ////            if (confirm(`Do you want to open this URL?\\n\\n${value}`)) {\n  //              window.open(value, '_blank');\n  ////            }\n  //\n  //            break;\n  //\n  //          default:\n  //            return next({ cardAction, getSignInUrl });\n  //        }\n  //      },\n  //  );\n\n  // 语音\n  const webSpeechPonyfillFactory = undefined\n  // const webSpeechPonyfillFactory = useMemo(\n  //   () =>\n  //     createCognitiveServicesSpeechServicesPonyfillFactory({\n  //       credentials: fetchCredentials\n  //     }),\n  // );\n\n  const styleSet = useMemo(\n    () =>\n      createStyleSet({\n        // Root\n        // rootHeight: '100%',\n        // rootWidth: '100%',\n        // rootZIndex: 0,\n\n        // Color and paddings\n        accent: '#005CB7',\n        backgroundColor: 'WhiteSmoke',\n\n        // Fonts\n        fontSizeSmall: '60%',\n\n        // Avatar\n        avatarBorderRadius: 20,\n        avatarSize: 40,\n        botAvatarInitials: '店',\n        botAvatarImage: 'https://www.dgrow.shop/echaos/dgrow.png',\n        userAvatarInitials: '我',\n        // userAvatarImage: userAvatarImage,\n\n        // Bubble\n        bubbleBackground: 'White',\n        //        bubbleBorderColor: '#E6E6E6',\n        bubbleBorderRadius: 20,\n        bubbleBorderStyle: 'solid',\n        bubbleBorderWidth: 1,\n        bubbleFromUserBackground: '#005CB7',\n        //        bubbleFromUserBorderColor: '#E6E6E6',\n        bubbleFromUserBorderRadius: 20,\n        bubbleFromUserBorderStyle: 'solid',\n        bubbleFromUserBorderWidth: 1,\n        //        bubbleFromUserNubOffset: 0,\n        //        bubbleFromUserNubSize: undefined,\n        bubbleFromUserTextColor: 'White',\n        //        bubbleImageHeight: 240,\n        //        bubbleMaxWidth: 480, // Based off screen width = 600px\n        //        bubbleMinHeight: 40,\n        bubbleMinWidth: 200, // min screen width = 300px; Microsoft Edge requires 372px (https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/13621468/)\n        //        bubbleNubOffset: 0,\n        //        bubbleNubSize: undefined,\n        bubbleTextColor: 'Black',\n        //        messageActivityWordBreak: 'break-word',\n\n        // Send box\n        hideSendBox: false,\n        hideUploadButton: true,\n        // microphoneButtonColorOnDictate: '#F33',\n        // sendBoxBackground: 'White',\n        // sendBoxButtonColor: '#3cb474',\n        // sendBoxButtonColorOnDisabled: '#CCC',\n        // sendBoxButtonColorOnFocus: '#333',\n        // sendBoxButtonColorOnHover: '#333',\n        // sendBoxDisabledTextColor: undefined,\n        // sendBoxHeight: 50,\n        // sendBoxMaxHeight: 200,\n        // sendBoxTextColor: 'Black',\n        // sendBoxBorderBottom: undefined,\n        // sendBoxBorderLeft: undefined,\n        // sendBoxBorderRight: undefined,\n        // sendBoxBorderTop: 'solid 2px #E6E6E6',\n        // sendBoxPlaceholderColor: undefined,\n        // sendBoxTextWrap: false,\n        // sendBoxButtonAlignment: 'stretch',\n\n        // Suggested actions\n        // suggestedActionBackground: '#ffde59',\n        // suggestedActionTextColor: 'White',\n        suggestedActionBorderRadius: 20,\n      }),\n  );\n\n  const [token, setToken] = useState();\n\n  // To learn about reconnecting to a conversation, see the following documentation:\n  // https://docs.microsoft.com/en-us/azure/bot-service/rest-api/bot-framework-rest-direct-line-3-0-reconnect-to-conversation?view=azure-bot-service-4.0\n\n  const handleFetchToken = useCallback(async () => {\n    if (!token) {\n      //  console.log('REACT_APP_DIRECT_LINE_TOKEN_URL: ' + process.env.REACT_APP_DIRECT_LINE_TOKEN_URL);\n      //  const res = await fetch('https://bot-python-2.azurewebsites.net/directline/token', { method: 'POST' });\n      //  const { token } = await res.json();\n\n      setToken('1QjveF_nTHI.KIwZdybOzMaAxgH_Ant0pHCBQUW5RJoF0Bbo9rYqjcQ');\n    }\n  }, [setToken, token]);\n\n  // TODO: [P2] Currently, we cannot unmount Web Chat from DOM when it is minimized.\n  //       Today, if we unmount it, Web Chat will call disconnect on DirectLineJS object.\n  //       When minimized, we still want to maintain that connection while the UI is gone.\n  //       This is related to https://github.com/microsoft/BotFramework-WebChat/issues/2750.\n\n  const directLine = useMemo(() => createDirectLine({ token }), [token]);\n\n  useEffect(() => {\n    handleFetchToken();\n  }, [handleFetchToken]);\n\n  return token ? (\n    <ReactWebChat\n      className={\"web-chat-fullscreen\"}\n      directLine={directLine}\n      store={store}\n      webSpeechPonyfillFactory={webSpeechPonyfillFactory}\n      styleSet={styleSet} />\n  ) : (\n    <div className={\"connect-spinner\"}>\n      <div className=\"content\">\n        <div className=\"icon\">\n          <span className=\"ms-Icon ms-Icon--Robot\" />\n        </div>\n        <p>请稍候，正在连接中……</p>\n      </div>\n    </div>\n  );\n};\n\nexport default WebChatFullScreen;\n","/**\n    语音Token服务\n*/\nconst RENEW_EVERY = 300000;\nlet fetchPromise;\nlet lastFetch = 0;\n\nasync function region() {\n  const { region } = await fetchCredentials();\n\n  return region;\n}\n\nasync function token() {\n  const { token } = await fetchCredentials();\n\n  return token;\n}\n\n// This fetch function will be called e`very time Web Speech recognizer or synthesizer start\n// You are advised to cache the token to prevent unnecessary network call and delay\nasync function fetchCredentials() {\n  const now = Date.now();\n\n  if (!fetchPromise || now - lastFetch > RENEW_EVERY) {\n    // fetchPromise = fetch('https://webchat-mockbot-streaming.azurewebsites.net/speechservices/token', { method: 'POST' })\n    fetchPromise = fetch('https://bot-python-2.azurewebsites.net/api/speechservices/token', { method: 'POST' })\n      .then(res => res.json())\n      .then(({ region, token }) => ({ authorizationToken: token, region }))\n      .catch(() => {\n        lastFetch = 0;\n      });\n\n    lastFetch = now;\n  }\n\n  // fetchPromise = { authorizationToken: 'eyJhbGciOiJFUzI1NiIsImtpZCI6ImtleTEiLCJ0eXAiOiJKV1QifQ.eyJyZWdpb24iOiJlYXN0dXMiLCJzdWJzY3JpcHRpb24taWQiOiI4NTVkZWUyN2NiOWY0MDRlYmE4MDlhOWFjNGMzZGRkNSIsInByb2R1Y3QtaWQiOiJTcGVlY2hTZXJ2aWNlcy5GMCIsImNvZ25pdGl2ZS1zZXJ2aWNlcy1lbmRwb2ludCI6Imh0dHBzOi8vYXBpLmNvZ25pdGl2ZS5taWNyb3NvZnQuY29tL2ludGVybmFsL3YxLjAvIiwiYXp1cmUtcmVzb3VyY2UtaWQiOiIvc3Vic2NyaXB0aW9ucy83ZjgyNWNiNy0xNTc5LTQ1ZGEtODgzYi02Njk0ZmJmMTJiODEvcmVzb3VyY2VHcm91cHMvQUkvcHJvdmlkZXJzL01pY3Jvc29mdC5Db2duaXRpdmVTZXJ2aWNlcy9hY2NvdW50cy9ib3Qtc3BlZWNoLTAiLCJzY29wZSI6InNwZWVjaHNlcnZpY2VzIiwiYXVkIjoidXJuOm1zLnNwZWVjaHNlcnZpY2VzLmVhc3R1cyIsImV4cCI6MTY3NzI5MDIyMiwiaXNzIjoidXJuOm1zLmNvZ25pdGl2ZXNlcnZpY2VzIn0.B6-8aC4ERmaSb8VgrFqKm5fgvd1awXmyssPKnrYWWd5oPPKBOb6lcWSqw20FTX15wc2GtNe8yUICDUXmtjD9Kg', region: 'eastus' }\n\n  return fetchPromise;\n}\n\nexport default fetchCredentials;\nexport { region, token };\n","import React from 'react';\n\nimport { Components, Constants } from 'botframework-webchat';\n\nconst { connectDictationInterims } = Components;\nconst {\n  DictateState: { DICTATING, STARTING }\n} = Constants;\n\nexport default connectDictationInterims()(\n  ({ className, dictateInterims, dictateState }) =>\n    (dictateState === STARTING || dictateState === DICTATING) &&\n    !!dictateInterims.length && (\n      <p className={className}>\n        {dictateInterims.map((interim, index) => (\n          <span key={index}>{interim}&nbsp;</span>\n        ))}\n      </p>\n    )\n);\n","import React from 'react';\n\nexport default ({ className, size = 22 }) => (\n  <svg className={(className || '') + ''} height={size} viewBox=\"0 0 58 58\" width={size}>\n    <path d=\"M 44 28 C 43.448 28 43 28.447 43 29 L 43 35 C 43 42.72 36.72 49 29 49 C 21.28 49 15 42.72 15 35 L 15 29 C 15 28.447 14.552 28 14 28 C 13.448 28 13 28.447 13 29 L 13 35 C 13 43.485 19.644 50.429 28 50.949 L 28 56 L 23 56 C 22.448 56 22 56.447 22 57 C 22 57.553 22.448 58 23 58 L 35 58 C 35.552 58 36 57.553 36 57 C 36 56.447 35.552 56 35 56 L 30 56 L 30 50.949 C 38.356 50.429 45 43.484 45 35 L 45 29 C 45 28.447 44.552 28 44 28 Z\" />\n    <path d=\"M 28.97 44.438 L 28.97 44.438 C 23.773 44.438 19.521 40.033 19.521 34.649 L 19.521 11.156 C 19.521 5.772 23.773 1.368 28.97 1.368 L 28.97 1.368 C 34.166 1.368 38.418 5.772 38.418 11.156 L 38.418 34.649 C 38.418 40.033 34.166 44.438 28.97 44.438 Z\" />\n    <path d=\"M 29 46 C 35.065 46 40 41.065 40 35 L 40 11 C 40 4.935 35.065 0 29 0 C 22.935 0 18 4.935 18 11 L 18 35 C 18 41.065 22.935 46 29 46 Z M 20 11 C 20 6.037 24.038 2 29 2 C 33.962 2 38 6.037 38 11 L 38 35 C 38 39.963 33.962 44 29 44 C 24.038 44 20 39.963 20 35 L 20 11 Z\" />\n  </svg>\n);\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Components } from 'botframework-webchat';\n\nimport MicrophoneIcon from './MicrophoneIcon';\n\nconst { connectMicrophoneButton } = Components;\n\nexport default connectMicrophoneButton()(({ className, click, dictating, disabled }) => (\n  <button className={classNames(className, { dictating })} disabled={disabled} onClick={click}>\n    <MicrophoneIcon size=\"10vmin\" />\n  </button>\n));\n","import React from 'react';\n\nimport { connectToWebChat, Components } from 'botframework-webchat';\n\nconst { SpeakActivity } = Components;\n\nexport default connectToWebChat(({ activities }) => ({\n  activity: activities\n    .slice()\n    .reverse()\n    .find(({ from: { role }, type }) => role === 'bot' && type === 'message')\n}))(\n  ({ activity }) =>\n    !!activity && (\n      <React.Fragment>\n        <p>{activity.text}</p>\n        {activity.channelData && activity.channelData.speak && <SpeakActivity activity={activity} />}\n      </React.Fragment>\n    )\n);\n","/**\n * 语音对话界面\n */\nimport React, { useEffect, useState } from 'react';\n\nimport { Components, createDirectLineSpeechAdapters } from 'botframework-webchat';\nimport fetchCognitiveServicesCredentials from '../../bot/token/fetchSpeechServicesCredentials';\n\nimport DictationInterims from './DictationInterims';\nimport MicrophoneButton from './MicrophoneButton';\nimport LastBotActivity from './LastBotActivity';\n\nimport './SpeechChat.css';\n\nconst { Composer } = Components;\n\nconst SpeechChat = () => {\n  const [directLineSpeechAdapters, setDirectLineSpeechAdapters] = useState();\n\n  useEffect(() => {\n    (async () =>\n      setDirectLineSpeechAdapters(\n        await createDirectLineSpeechAdapters({\n          fetchCredentials: fetchCognitiveServicesCredentials\n        })\n      ))();\n  }, [setDirectLineSpeechAdapters]);\n\n  return (\n    !!directLineSpeechAdapters && (\n      <Composer {...directLineSpeechAdapters}>\n        <div className=\"SpeechChat\">\n          <header className=\"SpeechChat-header\">\n            <MicrophoneButton className=\"SpeechChat-speech-button\" />\n            <DictationInterims className=\"SpeechChat-speech-interims\" />\n            <LastBotActivity className=\"SpeechChat-bot-activity\" />\n          </header>\n        </div>\n      </Composer>\n    )\n  );\n};\n\nexport default SpeechChat;","/**\n    模糊透镜组件\n*/\nimport './BlurLens.css';\n\nimport classNames from 'classnames';\nimport React from 'react';\nimport { hooks } from 'botframework-webchat';\n\nconst { useSendBoxSpeechInterimsVisible } = hooks;\n\nconst BlurLens = () => {\n  const [interimsVisible] = useSendBoxSpeechInterimsVisible();\n\n  return <div className={classNames('App-BlurLens', { hide: !interimsVisible })} />;\n};\n\nexport default BlurLens;\n","import { hooks } from 'botframework-webchat';\n\nconst { useActivities } = hooks;\n\nexport default function useLastBotActivity() {\n  const [activities] = useActivities();\n\n  return [\n    activities\n      .slice()\n      .reverse()\n      .find(({ from: { role }, type }) => role === 'bot' && type === 'message')\n  ];\n}\n","/**\n    聊天机器人回复组件\n*/\nimport { Components, createAdaptiveCardsAttachmentMiddleware, hooks } from 'botframework-webchat';\nimport Film from 'react-film';\nimport React, { useMemo } from 'react';\n\nimport useLastBotActivity from './hooks/useLastBotActivity';\n\nimport './BotResponse.css';\n\nconst { SpeakActivity } = Components;\nconst { useSendBoxSpeechInterimsVisible } = hooks;\n\nconst BotResponse = ({ lastReadActivityID }) => {\n  const [interimsVisible] = useSendBoxSpeechInterimsVisible();\n  const [lastBotActivity] = useLastBotActivity();\n\n  const renderAttachment = useMemo(() => {\n    return createAdaptiveCardsAttachmentMiddleware()()(() => false);\n  }, []);\n\n  return (\n    !interimsVisible &&\n    !!lastBotActivity &&\n    lastBotActivity.id !== lastReadActivityID && (\n      <div className=\"App-BotResponse\">\n        {!!lastBotActivity.text && <div className=\"App-BotResponse-Activity\">{lastBotActivity.text}</div>}\n        <Film className=\"App-BotResponse-Attachments\" showScrollBar={false}>\n          {(lastBotActivity.attachments || []).map((attachment, index) => (\n            <div className=\"App-BotResponse-Attachment\" key={index}>\n              {renderAttachment({ activity: lastBotActivity, attachment })}\n            </div>\n          ))}\n        </Film>\n        {lastBotActivity.channelData && lastBotActivity.channelData.speak && (\n          <SpeakActivity activity={lastBotActivity} />\n        )}\n      </div>\n    )\n  );\n};\n\nexport default BotResponse;\n","/**\n    语音聊天按钮组件\n*/\nimport './MicrophoneButton.css';\n\nimport { hooks } from 'botframework-webchat';\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\n\nconst { useMicrophoneButtonClick, useMicrophoneButtonDisabled, useSendBoxSpeechInterimsVisible } = hooks;\n\nconst CustomMicrophoneButton = ({ onClick }) => {\n  const [interimsVisible] = useSendBoxSpeechInterimsVisible();\n  const [disabled] = useMicrophoneButtonDisabled();\n  const click = useMicrophoneButtonClick();\n\n  const handleClick = useCallback(() => {\n    click();\n    onClick && onClick();\n  }, [click, onClick]);\n\n  return (\n    <button\n      className={classNames('App-MicrophoneButton', { dictating: interimsVisible })}\n      disabled={disabled}\n      onClick={handleClick}\n    >\n      <i className=\"ms-Icon ms-Icon--Microphone\" />\n    </button>\n  );\n};\n\nexport default CustomMicrophoneButton;\n","/**\n    语音生成文字临时显示组件\n*/\nimport './SpeechInterims.css';\n\nimport { hooks } from 'botframework-webchat';\nimport React from 'react';\n\nconst { useDictateInterims, useSendBoxSpeechInterimsVisible } = hooks;\n\nconst CustomDictationInterims = () => {\n  const [dictateInterims] = useDictateInterims();\n  const [speechInterimsVisible] = useSendBoxSpeechInterimsVisible();\n\n  return (\n    speechInterimsVisible && (\n      <div className=\"App-SpeechInterims\">\n        {!!speechInterimsVisible && dictateInterims.map((interim, index) => <span key={index}>{interim}&nbsp;</span>)}\n      </div>\n    )\n  );\n};\n\nexport default CustomDictationInterims;\n","/**\n    通知组件\n*/\nimport './Notification.css';\n\nimport classNames from 'classnames';\nimport React from 'react';\n\nconst Notification = ({ children, icon }) => {\n  return (\n    <div className=\"App-Notification\">\n      <i className={classNames('App-Notification-Icon', 'ms-Icon', `ms-Icon--${icon}`)} />\n      <div className=\"App-Notification-Text\">{children}</div>\n    </div>\n  );\n};\n\nexport default Notification;\n","/**\n    数字时钟组件\n*/\nimport './Clock.css';\n\nimport React, { useEffect, useState } from 'react';\n\nimport Notification from './Notification';\n\nconst WEATHER_FORECAST_URL = 'https://api.weather.gov/gridpoints/SEW/130,67/forecast';\n\nfunction useInterval(fn, intervalMS = 1000) {\n  useEffect(() => {\n    if (fn && intervalMS) {\n      const interval = setInterval(fn, intervalMS);\n\n      return () => clearInterval(interval);\n    }\n  }, [fn, intervalMS]);\n}\n\nconst Clock = () => {\n  const [clock, setClock] = useState(Date.now());\n  const [temperatureInFahrenheit, setTemperatureInFahrenheit] = useState();\n\n  useEffect(() => {\n    (async () => {\n      const res = await fetch(WEATHER_FORECAST_URL, {\n        headers: { accept: 'application/geo+json' }\n      });\n\n      if (res.ok) {\n        const {\n          properties: {\n            periods: [firstPeriod]\n          }\n        } = await res.json();\n\n        setTemperatureInFahrenheit(firstPeriod.temperature);\n      }\n    })();\n  }, []);\n\n  useInterval(() => setClock(Date.now()), 1000);\n\n  return (\n    <div className=\"App-Clock\">\n      <div className=\"App-Clock-Text\">\n        {Intl.DateTimeFormat('en-US', { hour12: false, timeStyle: 'short' }).format(new Date(clock))}\n      </div>\n      {!!temperatureInFahrenheit && <Notification icon=\"PartlyCloudyDay\">{temperatureInFahrenheit}&deg;F</Notification>}\n      <Notification icon=\"Mail\">2</Notification>\n      <Notification icon=\"SkypeForBusinessLogo\">1</Notification>\n    </div>\n  );\n};\n\nexport default Clock;\n","/**\n    显示屏对话主界面\n*/\nimport React, { useCallback, useState } from 'react';\n\nimport BlurLens from '../../bot/BlurLens';\nimport BotResponse from '../../bot/BotResponse';\nimport MicrophoneButton from '../../bot/MicrophoneButton';\nimport SpeechInterims from '../../bot/SpeechInterims';\nimport useLastBotActivity from '../../bot/hooks/useLastBotActivity';\n\nimport Clock from './widgets/Clock';\n\nimport './SmartDisplay.css';\n\nconst SmartDisplay = () => {\n  const [lastBotActivity] = useLastBotActivity();\n  const [lastReadActivityID, setLastReadActivityID] = useState();\n\n  const handleMicrophoneButtonClick = useCallback(() => {\n    lastBotActivity && setLastReadActivityID(lastBotActivity.id);\n  }, [lastBotActivity, setLastReadActivityID]);\n\n  return (\n    <div className=\"App-SmartDisplay\">\n      <Clock />\n      <BlurLens />\n      <SpeechInterims />\n      <BotResponse lastReadActivityID={lastReadActivityID} />\n      <MicrophoneButton onClick={handleMicrophoneButtonClick} />\n    </div>\n  );\n};\n\nexport default SmartDisplay;\n","/**\n * 显示屏对话主要逻辑模块\n */\nimport React, { useEffect, useState } from 'react';\n\nimport { Components, createDirectLineSpeechAdapters } from 'botframework-webchat';\nimport fetchCognitiveServicesCredentials from '../../bot/token/fetchSpeechServicesCredentials';\n\nimport SmartDisplay from './SmartDisplay';\n\nconst { Composer } = Components;\n\nconst Display = () => {\n  const [directLineSpeechAdapters, setDirectLineSpeechAdapters] = useState();\n\n  useEffect(() => {\n    (async () =>\n      setDirectLineSpeechAdapters(\n        await createDirectLineSpeechAdapters({\n          fetchCredentials: fetchCognitiveServicesCredentials\n        })\n      ))();\n  }, [setDirectLineSpeechAdapters]);\n\n  return (\n    !!directLineSpeechAdapters && (\n      <Composer {...directLineSpeechAdapters}>\n        <SmartDisplay />\n      </Composer>\n    )\n  );\n};\n\nexport default Display;","/**\n    聊天机器人回复组件\n*/\nimport React, { useMemo } from 'react';\n\nimport { Components, hooks } from 'botframework-webchat';\n\nimport useLastBotActivity from './hooks/useLastBotActivity';\nimport './HoloResponse.css';\n\nconst { SpeakActivity } = Components;\nconst { useSendBoxSpeechInterimsVisible } = hooks;\n\nconst HoloResponse = ({ lastReadActivityID }) => {\n  const [interimsVisible] = useSendBoxSpeechInterimsVisible();\n  const [lastBotActivity] = useLastBotActivity();\n\n  return (\n    !interimsVisible &&\n    !!lastBotActivity &&\n    lastBotActivity.id !== lastReadActivityID && (\n      <div className=\"App-HoloResponse\">\n        {!!lastBotActivity.text && <div className=\"App-HoloResponse-Activity\">{lastBotActivity.text}</div>}\n        {lastBotActivity.channelData && lastBotActivity.channelData.speak && (\n          <SpeakActivity activity={lastBotActivity} />\n        )}\n      </div>\n    )\n  );\n};\n\nexport default HoloResponse;\n","import * as THREE from 'three'\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\n\n// Dance  \n// Death  \n// Idle  \n// Jump  \n// No  \n// Punch  \n// Running  \n// Sitting  \n// Standing  \n// ThumbsUp  \n// Walking  \n// WalkJump  \n// Wave  \n// Yes\n\nfunction loadRobotExpressiveModel(scene, camera, lastBotActivity, callback) {\n\n    console.log('loadRobotExpressiveModel');\n\n    const onLoad = (gltf) => {\n        console.log('loadRobotExpressiveModel onLoad');\n\n        gltf.scene.position.set(0, 0, -30)\n        gltf.scene.scale.set(4, 4, 4)\n\n        scene.add(gltf.scene)\n\n        const morph = gltf.scene.getObjectByName('Head_4');\n        console.log('loadRobotExpressiveModel morph: ' + morph)\n\n        const mixer = new THREE.AnimationMixer(gltf.scene)\n        console.log('loadRobotExpressiveModel mixer: ' + mixer)\n        gltf.animations.forEach(\n            clip => {\n                // console.log('clip.name: ' + clip.name)\n                if (clip.name === 'Idle') {\n                    mixer.clipAction(clip).setLoop(THREE.LoopRepeat).play()\n                }\n            }\n        )\n        callback(gltf.animations, mixer, morph)\n    };\n\n    const onProgress = (event) => {\n        // console.log('event.total: ' + event.total)\n        // console.log('event.loaded: ' + event.loaded)\n    };\n\n    const onError = (e) => {\n        console.error(e)\n    }\n\n    new GLTFLoader().load('/models/gltf/RobotExpressive.glb', onLoad, onProgress, onError)\n}\n\nexport default loadRobotExpressiveModel","/**\n 场景基础类\n */\nimport * as THREE from 'three'\n\nclass Scene {\n    constructor() {\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 100);\n\n        this.scene = scene\n        this.camera = camera\n        this.action = ''\n        this.isNew = false\n        this.clips = []\n        this.mixers = []\n        this.morphs = []\n\n        this.setParams()\n        this.setBackground()\n        this.setGround()\n        this.setLight()\n    }\n\n    // 设置参数\n    setParams() {\n        this.scene.position.set(0, 0, 0);\n        this.camera.position.set(0, 10, 10);\n        this.camera.lookAt(new THREE.Vector3(0, 10, 0));\n    }\n\n    // 设置背景\n    // background\n    setBackground() {\n        this.scene.background = new THREE.Color(0xe0e0e0);\n        this.scene.fog = new THREE.Fog(0xe0e0e0, 70, 100);\n    }\n\n    // 添加地面\n    // ground\n    setGround() {\n        const mesh = new THREE.Mesh(new THREE.PlaneGeometry(40, 100), new THREE.MeshPhongMaterial({ color: 0x999999, depthWrite: false }));\n        mesh.rotation.x = - Math.PI / 2;\n        this.scene.add(mesh);\n\n        const grid = new THREE.GridHelper(10, 40, 0x000000, 0x000000);\n        grid.material.opacity = 0.2;\n        grid.material.transparent = true;\n        this.scene.add(grid);\n\n    }\n\n    // 添加光线\n    // lights\n    setLight() {\n        // 半球光\n        const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444);\n        hemiLight.position.set(0, 20, 5);\n        this.scene.add(hemiLight);\n\n        // 直射光\n        const dirLight = new THREE.DirectionalLight(0xffffff);\n        dirLight.position.set(0, 20, 10);\n        this.scene.add(dirLight);\n    }\n}\n\nexport default Scene;","import * as THREE from 'three'\n\nimport loadKnightModel from '../model/Knight'\nimport loadRobotExpressiveModel from '../model/RobotExpressive'\n\nimport Scene from './Scene'\n\nclass Actions extends Scene {\n    constructor(lastBotActivity) {\n        super();\n        console.log('Actions constructor');\n        this.addModel(lastBotActivity)\n    }\n\n    // 添加模型\n    // model\n    addModel(lastBotActivity) {\n        console.log('Actions addModel');\n        const onModelLoaded = (clips, mixer, morph) => {\n            this.clips = clips\n\n            console.log('Actions mixer: ' + mixer)\n            this.mixers.push(mixer)\n\n            console.log('Actions morph: ' + morph)\n            this.morphs.push(morph)\n        }\n\n        // loadKnightModel(this.scene, this.camera, onMixer)\n        loadRobotExpressiveModel(this.scene, this.camera, lastBotActivity, onModelLoaded)\n    }\n\n    exeAnimateClip(dt) {\n\n        this.mixers.forEach((mixer) => mixer.update(dt));\n    }\n    exeAnimateMorph(action) {\n        console.log('build_morph action: ' + action)\n        console.log('build_morph action: ' + typeof (action))\n\n        action = JSON.parse(action.replaceAll(\"\\'\", \"\\\"\"))\n        console.log('build_morph action: ' + typeof (action))\n\n        let intentResult = action['intent']\n        exe_clip(this.mixers[0], this.clips, intentResult)\n\n        let sentimentResult = action['sentiment']\n        exe_morph(this.morphs[0], build_morph(sentimentResult));\n    }\n}\n\n// 将后端传来的情绪数据转换成模型变形数据\nfunction build_morph(sentimentResult) {\n    console.log('build_morph sentimentResult: ' + JSON.stringify(sentimentResult))\n    let sentiment = sentimentResult['sentiment']\n\n    let morph = { 'index': 0, 'influence': 0.0 }\n    if (sentiment === 'positive') {\n        morph = { 'index': 1, 'influence': sentimentResult[sentiment] }\n    } else if (sentiment === 'negative') {\n        let x = Math.floor(Math.random() * 100) / 2\n        if (x === 0) {\n            morph = { 'index': 0, 'influence': sentimentResult[sentiment] }\n        } else {\n            morph = { 'index': 2, 'influence': sentimentResult[sentiment] }\n        }\n    }\n\n    console.log('build_morph morph: ' + JSON.stringify(morph))\n\n    return morph\n}\n\nfunction exe_clip(mixer, clips, action) {\n    clips.forEach(\n        clip => {\n            // console.log('clip.name: ' + clip.name)\n            if (clip.name === action) {\n                mixer.clipAction(clip).setLoop(THREE.LoopOnce).play()\n            }\n        }\n    )\n}\n\n// 执行变形数据\nfunction exe_morph(morph, morphDict) {\n    // console.log('exe_morph morph: ' + JSON.stringify(morph))\n    console.log('exe_morph morphDict: ' + JSON.stringify(morphDict))\n\n    let index = morphDict['index']\n    let influence = morphDict['influence']\n\n    const expressions = Object.keys(morph.morphTargetDictionary)\n    console.log('expressions: ' + expressions)\n    console.log('expression: ' + expressions[index])\n    console.log('influence: ' + influence)\n\n    morph.morphTargetInfluences[index] = influence\n    morph.morphTargetInfluences[(index + 1) % 3] = 0.0\n    morph.morphTargetInfluences[(index + 2) % 3] = 0.0\n}\n\nexport default Actions;\nexport {\n    build_morph,\n    exe_morph\n}","/**\n * 全息主要场景\n */\nimport React, { Component } from 'react'\nimport * as THREE from 'three'\n\nimport Actions from '../scene/Actions'\n\nclass RendererComponent extends Component {\n  constructor(props) {\n    super(props)\n\n    this.start = this.start.bind(this)\n    this.stop = this.stop.bind(this)\n    this.animate = this.animate.bind(this)\n\n    this.init()\n    this.setParam()\n\n    let scenes = addSceneModels(this.props.lastBotActivity)\n    this.scenes = scenes\n    this.scene = scenes.scene\n    this.camera = scenes.camera\n    // this.mixers = scenes.mixers\n    // this.morphs = scenes.morphs\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    this.mount.appendChild(this.renderer.domElement)\n    this.start()\n  }\n\n  componentDidUpdate() {\n    console.log('componentDidUpdate');\n  }\n\n  componentWillUnmount() {\n    console.log('componentWillUnmount');\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  animate() {\n    const dt = this.clock.getDelta();\n    this.scenes.exeAnimateClip(dt) // 切片动画更新\n\n    if (!!this.props.lastBotActivity && this.props.lastBotActivity.action) {\n      console.log('loadRobotExpressiveModel lastBotActivity.action: ' + JSON.stringify(this.props.lastBotActivity.action))\n      let action = this.props.lastBotActivity['action']\n      this.scenes.exeAnimateMorph(action) // 变形动画更新\n    }\n\n    this.renderer.render(this.scene, this.camera); // 呈现\n    this.frameId = window.requestAnimationFrame(this.animate)\n  }\n\n  render() {\n    return (\n      <div\n        ref={(mount) => { this.mount = mount }}\n      />\n    )\n  }\n\n  // ==============================================================================================\n  // 内部函数\n  // ==============================================================================================\n  //  初始化renderer\n  init() {\n    console.log('window.innerWidth: ' + window.innerWidth);\n    console.log('window.innerHeight: ' + window.innerHeight);\n\n    const clock = new THREE.Clock();\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    this.clock = clock\n    this.renderer = renderer\n  }\n\n  // 设置renderer参数\n  setParam() {\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n  }\n}\n\n\n// ==============================================================================================\n// 内部函数\n// ==============================================================================================\n// 添加场景化模型\nfunction addSceneModels(lastBotActivity) {\n  console.log('addSceneModels');\n  let scenes = new Actions(lastBotActivity)\n  // let scenes = new SeaWorld()\n  // let scenes = new SkyWorld()\n  // let scenes = new Senua()\n  // let scenes = new Space()\n  // let scenes = new StarWars()\n  // let scenes = new TalkingMan()\n\n  return scenes\n}\n\nexport default RendererComponent\n","/**\n 全息对话主要显示场景(原生)\n */\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport HoloResponse from '../../bot/HoloResponse';\nimport MicrophoneButton from '../../bot/MicrophoneButton';\nimport SpeechInterims from '../../bot/SpeechInterims';\nimport useLastBotActivity from '../../bot/hooks/useLastBotActivity';\n\nimport RendererComponent from './renderer/RendererComponent'\n\n\nexport default function ComposerScene() {\n\n  // 设置最新聊天信息\n  const [lastBotActivity] = useLastBotActivity();\n  const [lastReadActivityID, setLastReadActivityID] = useState();\n  console.log('lastBotActivity: ' + JSON.stringify(lastBotActivity));\n\n  // 处理语音按钮事件\n  const handleMicrophoneButtonClick = useCallback(() => {\n    lastBotActivity && setLastReadActivityID(lastBotActivity.id);\n  }, [lastBotActivity, setLastReadActivityID]);\n\n  return (\n    <div>\n      <RendererComponent lastReadActivityID={lastReadActivityID} lastBotActivity={lastBotActivity} />\n      <SpeechInterims />\n      <HoloResponse lastReadActivityID={lastReadActivityID} />\n      <MicrophoneButton onClick={handleMicrophoneButtonClick} />\n    </div>\n  )\n}","/**\n * 全息对话主要逻辑模块\n */\nimport React, { useEffect, useState } from 'react';\n\nimport { Components, createDirectLineSpeechAdapters } from 'botframework-webchat';\nimport fetchCognitiveServicesCredentials from '../../bot/token/fetchSpeechServicesCredentials';\n\nimport ComposerScene from './ComposerScene';\nimport ComposerSceneFunction from './ComposerSceneFunction';\n\nconst { Composer } = Components;\n\nconst Holograph = () => {\n  const [directLineSpeechAdapters, setDirectLineSpeechAdapters] = useState();\n\n  useEffect(() => {\n    (async () =>\n      setDirectLineSpeechAdapters(\n        await createDirectLineSpeechAdapters({\n          fetchCredentials: fetchCognitiveServicesCredentials\n        })\n      ))();\n  }, [setDirectLineSpeechAdapters]);\n\n  return (\n    !!directLineSpeechAdapters && (\n      <Composer {...directLineSpeechAdapters}>\n        <ComposerScene />\n      </Composer>\n    )\n  );\n};\n\nexport default Holograph;","import React from 'react';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport WebChatMinimizable from './chat/minimizable/WebChatMinimizable';\nimport WebChatFullScreen from './chat/webchat/WebChatFullScreen';\nimport SpeechChat from './chat/speech/SpeechChat';\nimport Display from './chat/display/Display';\nimport Holograph from './chat/holograph/Holograph';\n\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div>\n\n        {/* <nav>\n          <ul>\n            <li>\n              <Link to=\"/webchat-fullscreen\">FullScreen</Link>\n            </li>\n             <li>\n              <Link to=\"/webchat-minimizable\">Minimizable</Link>\n            </li>\n            <li>\n              <Link to=\"/speech\">SpeechChat</Link>\n            </li>           \n            <li>\n              <Link to=\"/display\">Display</Link>\n            </li>\n            <li>\n              <Link to=\"/holograph\">Holograph</Link>\n            </li>\n          </ul>\n        </nav> */}\n\n        <Routes>\n          <Route path=\"/\" element={<Holograph />} />\n          <Route path=\"/webchat-fullscreen\" element={<WebChatFullScreen />} />\n          <Route path=\"/webchat-minimizable\" element={<WebChatMinimizable />} />\n          <Route path=\"/speech\" element={<SpeechChat />} />\n          <Route path=\"/display\" element={<Display />} />\n          <Route path=\"/holograph\" element={<Holograph />} />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//import * as serviceWorker from './serviceWorker';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}